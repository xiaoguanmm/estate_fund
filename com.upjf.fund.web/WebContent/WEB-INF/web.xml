<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">

	<display-name>risk</display-name>
	<!-- 指定Spring的配置文件,否则Spring会默认从WEB-INF下寻找配置文件, contextConfigLocation属性是Spring内部固定的 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/spring-context.xml,classpath:spring/spring-mvc.xml</param-value>
	</context-param>
	<!-- 配置加载log4j.xml文件路径 -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:config/log4j.xml</param-value>
	</context-param>
	
	<!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<!-- 设置true由servlet容器控制filter的生命周期 -->
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- param属性对应对应Spring容器的filter的Bean id -->
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>shiroFilter</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!--Spring ApplicationContext 载入 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 使Spring支持request与session的scope,如:<bean id="loginAction" class="com.foo.LoginAction" 
		scope="request"/> -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<!-- Spring 刷新Introspector防止内存泄露 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!-- 配置log4j.xml监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	
	<!-- XSS Filter -->
	<filter>
	    <filter-name>XSSFilter</filter-name>
	    <filter-class>com.upjf.fund.web.filter.XSSFilter</filter-class>
	</filter>
	<filter-mapping>
	    <filter-name>XSSFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	    <dispatcher>REQUEST</dispatcher>
    	<dispatcher>FORWARD</dispatcher>
	</filter-mapping>

	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
    <servlet>
		<servlet-name>SpringMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>SpringMVC</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	
	<!-- google kaptcha 验证码生成  start-->
	<servlet>
		 <servlet-name>kaptcha</servlet-name>
		<servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>
		<init-param>
			<description>图片边框，合法值：yes , no</description>
			<param-name>kaptcha.border</param-name>
			<param-value>no</param-value>
		</init-param>
		<init-param>
			<description>边框颜色，合法值： r,g,b (and optional alpha) 或者 white,black,blue.</description>
			<param-name>kaptcha.border.color</param-name>
			<param-value>red</param-value>
		</init-param>
		<init-param>
			<description>边框厚度，合法值：>0</description>
			<param-name>kaptcha.border.thickness</param-name>
			<param-value>5</param-value>
		</init-param>
		<init-param>
			<description>图片宽</description>
			<param-name>kaptcha.image.width</param-name>
			<param-value>85</param-value>
		</init-param>
		<init-param>
			<description>图片高</description>
			<param-name>kaptcha.image.height</param-name>
			<param-value>40</param-value>
		</init-param>
		<init-param>
			<description>图片实现类</description>
			<param-name>kaptcha.producer.impl</param-name>
			<param-value>com.google.code.kaptcha.impl.DefaultKaptcha </param-value>
		</init-param>
		<init-param>
			<description>文本实现类</description>
			<param-name>kaptcha.textproducer.impl</param-name>
			<param-value>com.google.code.kaptcha.text.impl.DefaultTextCreator</param-value>
		</init-param>
		<init-param>
			<description>文本集合，验证码值从此集合中获取</description>
			<param-name>kaptcha.textproducer.char.string</param-name>
			<param-value>acdefkmnrstwxy134578AEFGHKMNPQRSWXY</param-value>
		</init-param>
		<init-param>
			<description>验证码长度</description>
			<param-name>kaptcha.textproducer.char.length</param-name>
			<param-value>1</param-value>
		</init-param>
		<init-param>
			<description>字体</description>
			<param-name>kaptcha.textproducer.font.names</param-name>
			<param-value>Arial, Courier</param-value>
		</init-param>
		<init-param>
			<description>字体大小</description>
			<param-name>kaptcha.textproducer.font.size</param-name>
			<param-value>23</param-value>
		</init-param>
		<init-param>
			<description>字体颜色，合法值： r,g,b  或者 white,black,blue.</description>
			<param-name>kaptcha.textproducer.font.color</param-name>
			<param-value>black</param-value>
		</init-param>
		<init-param>
			<description>文字间隔</description>
			<param-name>kaptcha.textproducer.char.space</param-name>
			<param-value>2</param-value>
		</init-param>
		<init-param>
			<description>干扰实现类</description>
			<param-name>kaptcha.noise.impl</param-name>
			<param-value>com.google.code.kaptcha.impl.NoNoise </param-value>
		</init-param>
		<init-param>
			<description>干扰颜色，合法值： r,g,b 或者 white,black,blue.</description>
			<param-name>kaptcha.noise.color</param-name>
			<param-value>blue</param-value>
		</init-param>
		<init-param>
			<description>图片样式： 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy</description>
			<param-name>kaptcha.obscurificator.impl</param-name>
			<param-value>com.google.code.kaptcha.impl.ShadowGimpy</param-value>
		</init-param>
		<init-param>
			<description>背景实现类</description>
			<param-name>kaptcha.background.impl</param-name>
			<param-value>com.google.code.kaptcha.impl.DefaultBackground</param-value>
		</init-param>
		<init-param>
			<description>背景颜色渐变，开始颜色</description>
			<param-name>kaptcha.background.clear.from</param-name>
			<param-value>167,167,167</param-value>
		</init-param>
		<init-param>
			<description>背景颜色渐变，结束颜色</description>
			<param-name>kaptcha.background.clear.to</param-name>
			<param-value>167,167,167</param-value>
		</init-param>
		<init-param>
			<description>文字渲染器</description>
			<param-name>kaptcha.word.impl</param-name>
			<param-value>com.google.code.kaptcha.text.impl.DefaultWordRenderer</param-value>
		</init-param> 
		<init-param>
			<description>session key</description>
			<param-name>kaptcha.session.key</param-name>
			<param-value>KAPTCHA_SESSION_KEY</param-value>
		</init-param>
		<init-param>
			<description>session date</description>
			<param-name>kaptcha.session.date</param-name>
			<param-value>KAPTCHA_SESSION_DATE</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>kaptcha</servlet-name>
		<url-pattern>/Kaptcha.jpg</url-pattern>
	</servlet-mapping>
	<!-- google kaptcha 验证码生成  end-->


	<welcome-file-list>
		<welcome-file>/pages/home/index.jsp</welcome-file>
	</welcome-file-list>

	<error-page>
		<error-code>404</error-code>
		<location>/common/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>405</error-code>
		<location>/common/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/common/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>503</error-code>
		<location>/common/error.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<location>/common/error.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.NoSuchMethodException</exception-type>
		<location>/common/error.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.io.IOException</exception-type>
		<location>/common/error.jsp</location>
	</error-page>

	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>

	<!-- 浏览器不支持put,delete等method,由该filter将_method=delete转换为标准的http delete方法 -->
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<servlet-name>SpringMVC</servlet-name>
	</filter-mapping>
	<jsp-config>  
	    <taglib>  
	      <taglib-uri>http://www.tag.com/riskTag</taglib-uri>  
	      <taglib-location>/WEB-INF/tag/tags.tld </taglib-location>  
	    </taglib>  
	 </jsp-config>  
</web-app>
